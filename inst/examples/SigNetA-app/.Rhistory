for (ii in 1:lid){
print(ii)
#ii<-1
pwid1 = pw_list[ii,1]
pw_component_list = listPathwayComponents(biopax,pwid1, returnIDonly=T)
if(length(pw_component_list)==0) {warning("Pathway seems to have no pathway components"); return(NULL)}
pw_component_list = selectInstances(biopax,id=pw_component_list, includeReferencedInstances=TRUE, returnCopy=TRUE)
print(pw_component_list)
pw_component_list$property = tolower(pw_component_list$property)
setkeyv(pw_component_list, cols=c("id","class","property"))
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("control","catalysis","modulation","templatereactionregulation"),]
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("physical-entity","cellular-location","xref","stoichiometric-coefficient","db","right","left","term","id"),]
#print(pw_controls)
idx <- NULL
idx1 <- NULL
## if (length(pw_controls$id)!=0){
readMatrix <- function(biopax,pwid1,ii) {
out <- tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
message("This is the 'try' part")
##readLines(con=url, warn=FALSE)
pathway2AdjacancyMatrix(biopax, pwid1, expandSubpathways=TRUE,splitComplexMolecules=TRUE, verbose=TRUE,useIDasNodenames=TRUE)
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("URL does not seem to exist:", pwid1,ii))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", pwid1,ii))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("Processed URL:", pwid1,ii))
message("Some other message at the end")
}
)
return(out)
}
pw_1_adj <- readMatrix(biopax,pwid1,ii)
print(pw_1_adj)
# print(pw_1_adj)
if( !is.null(pw_1_adj)){
ndim <- nrow(pw_1_adj)
if((ndim != 0)&(ndim != 1)){
idx <- which(pw_1_adj !=0,arr.ind = T)
if(!(length(idx) == 0)){
tname <- matrix(0,nrow(idx),ncol(idx))
for(i1 in 1:nrow(idx)){
for(j1 in 1:ncol(idx)){
tname[i1,j1] <- rownames(pw_1_adj)[idx[i1,j1]]
}
}
}
colnames(tname) <- c("source","destination")
rownames(tname) <- rownames(idx)
## set all non zero elements in matrix is 1
tvalue <- matrix(0,nrow(idx),1)
for(i2 in 1:nrow(idx)){
for(j2 in 1:ncol(idx)){
tvalue[i2,1] <- 1
}
}
colnames(tvalue) <- "Interaction"
rownames(tvalue) <- rownames(idx)
tfinal <- cbind (tname,tvalue)
## adjust the inhibiton to -1 in matrix
idx1 <- which(pw_1_adj =="-1",arr.ind = T)
#idx2 <- which(apply(matrix(idx %in% idx1, dim(idx)), 1, all))
nidx <- length(idx1)
if (!(nidx == 0)){
ts <- matrix(0,nrow(idx1),1)
for(i in 1:nrow(idx1)){
tmp <- idx1[i,]
j <- 1
for (j in 1:nrow(idx)){
if ((tmp[1]== idx[j,1]) & (tmp[2]==idx[j,2])){
ts[i] <- j
}
j <- j+1
}
}
tfinal[ts,3] <- -1
}
View(tfinal)
myfile <- paste(pw_list[ii,1],".rda")
print(myfile)
if(grepl("/",myfile)){
myfile<-gsub("/", "\\", myfile, fixed=TRUE)
}
setwd("/Users/Rashid/Desktop/Rashid/Career/PhD/Research/projects/NCIPathways/bioModels/curated/BIOMD0000000427/finaltable/")
save(tfinal,file=myfile)
}
}
}
##}
pw_list <- listInstances(biopax,class = "protein")
lid <- length(pw_list[,1])
for (ii in 1:lid){
print(ii)
#ii<-1
pwid1 = pw_list[ii,1]
pw_component_list = listPathwayComponents(biopax,pwid1, returnIDonly=T)
if(length(pw_component_list)==0) {warning("Pathway seems to have no pathway components"); return(NULL)}
pw_component_list = selectInstances(biopax,id=pw_component_list, includeReferencedInstances=TRUE, returnCopy=TRUE)
print(pw_component_list)
pw_component_list$property = tolower(pw_component_list$property)
setkeyv(pw_component_list, cols=c("id","class","property"))
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("control","catalysis","modulation","templatereactionregulation"),]
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("physical-entity","cellular-location","xref","stoichiometric-coefficient","db","right","left","term","id"),]
#print(pw_controls)
idx <- NULL
idx1 <- NULL
## if (length(pw_controls$id)!=0){
readMatrix <- function(biopax,pwid1,ii) {
out <- tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
message("This is the 'try' part")
##readLines(con=url, warn=FALSE)
pathway2AdjacancyMatrix(biopax, pwid1, expandSubpathways=TRUE,splitComplexMolecules=TRUE, verbose=TRUE,useIDasNodenames=TRUE)
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("URL does not seem to exist:", pwid1,ii))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", pwid1,ii))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("Processed URL:", pwid1,ii))
message("Some other message at the end")
}
)
return(out)
}
pw_1_adj <- readMatrix(biopax,pwid1,ii)
print(pw_1_adj)
# print(pw_1_adj)
if( !is.null(pw_1_adj)){
ndim <- nrow(pw_1_adj)
if((ndim != 0)&(ndim != 1)){
idx <- which(pw_1_adj !=0,arr.ind = T)
if(!(length(idx) == 0)){
tname <- matrix(0,nrow(idx),ncol(idx))
for(i1 in 1:nrow(idx)){
for(j1 in 1:ncol(idx)){
tname[i1,j1] <- rownames(pw_1_adj)[idx[i1,j1]]
}
}
}
colnames(tname) <- c("source","destination")
rownames(tname) <- rownames(idx)
## set all non zero elements in matrix is 1
tvalue <- matrix(0,nrow(idx),1)
for(i2 in 1:nrow(idx)){
for(j2 in 1:ncol(idx)){
tvalue[i2,1] <- 1
}
}
colnames(tvalue) <- "Interaction"
rownames(tvalue) <- rownames(idx)
tfinal <- cbind (tname,tvalue)
## adjust the inhibiton to -1 in matrix
idx1 <- which(pw_1_adj =="-1",arr.ind = T)
#idx2 <- which(apply(matrix(idx %in% idx1, dim(idx)), 1, all))
nidx <- length(idx1)
if (!(nidx == 0)){
ts <- matrix(0,nrow(idx1),1)
for(i in 1:nrow(idx1)){
tmp <- idx1[i,]
j <- 1
for (j in 1:nrow(idx)){
if ((tmp[1]== idx[j,1]) & (tmp[2]==idx[j,2])){
ts[i] <- j
}
j <- j+1
}
}
tfinal[ts,3] <- -1
}
View(tfinal)
myfile <- paste(pw_list[ii,1],".rda")
print(myfile)
if(grepl("/",myfile)){
myfile<-gsub("/", "\\", myfile, fixed=TRUE)
}
setwd("/Users/Rashid/Desktop/Rashid/Career/PhD/Research/projects/NCIPathways/bioModels/curated/BIOMD0000000427/finaltable/")
save(tfinal,file=myfile)
}
}
}
##}
pw_list <- listInstances(biopax,class = "pathway")
lid <- length(pw_list[,1])
for (ii in 1:lid){
print(ii)
#ii<-1
pwid1 = pw_list[ii,1]
pw_component_list = listPathwayComponents(biopax,pwid1, returnIDonly=T)
if(length(pw_component_list)==0) {warning("Pathway seems to have no pathway components"); return(NULL)}
pw_component_list = selectInstances(biopax,id=pw_component_list, includeReferencedInstances=TRUE, returnCopy=TRUE)
print(pw_component_list)
pw_component_list$property = tolower(pw_component_list$property)
setkeyv(pw_component_list, cols=c("id","class","property"))
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("control","catalysis","modulation","templatereactionregulation"),]
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("physical-entity","cellular-location","xref","stoichiometric-coefficient","db","right","left","term","id"),]
#print(pw_controls)
idx <- NULL
idx1 <- NULL
## if (length(pw_controls$id)!=0){
readMatrix <- function(biopax,pwid1,ii) {
out <- tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
message("This is the 'try' part")
##readLines(con=url, warn=FALSE)
pathway2AdjacancyMatrix(biopax, pwid1, expandSubpathways=TRUE,splitComplexMolecules=TRUE, verbose=TRUE,useIDasNodenames=TRUE)
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("URL does not seem to exist:", pwid1,ii))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", pwid1,ii))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("Processed URL:", pwid1,ii))
message("Some other message at the end")
}
)
return(out)
}
pw_1_adj <- readMatrix(biopax,pwid1,ii)
print(pw_1_adj)
# print(pw_1_adj)
if( !is.null(pw_1_adj)){
ndim <- nrow(pw_1_adj)
if((ndim != 0)&(ndim != 1)){
idx <- which(pw_1_adj !=0,arr.ind = T)
if(!(length(idx) == 0)){
tname <- matrix(0,nrow(idx),ncol(idx))
for(i1 in 1:nrow(idx)){
for(j1 in 1:ncol(idx)){
tname[i1,j1] <- rownames(pw_1_adj)[idx[i1,j1]]
}
}
}
colnames(tname) <- c("source","destination")
rownames(tname) <- rownames(idx)
## set all non zero elements in matrix is 1
tvalue <- matrix(0,nrow(idx),1)
for(i2 in 1:nrow(idx)){
for(j2 in 1:ncol(idx)){
tvalue[i2,1] <- 1
}
}
colnames(tvalue) <- "Interaction"
rownames(tvalue) <- rownames(idx)
tfinal <- cbind (tname,tvalue)
## adjust the inhibiton to -1 in matrix
idx1 <- which(pw_1_adj =="-1",arr.ind = T)
#idx2 <- which(apply(matrix(idx %in% idx1, dim(idx)), 1, all))
nidx <- length(idx1)
if (!(nidx == 0)){
ts <- matrix(0,nrow(idx1),1)
for(i in 1:nrow(idx1)){
tmp <- idx1[i,]
j <- 1
for (j in 1:nrow(idx)){
if ((tmp[1]== idx[j,1]) & (tmp[2]==idx[j,2])){
ts[i] <- j
}
j <- j+1
}
}
tfinal[ts,3] <- -1
}
View(tfinal)
myfile <- paste(pw_list[ii,1],".rda")
print(myfile)
if(grepl("/",myfile)){
myfile<-gsub("/", "\\", myfile, fixed=TRUE)
}
setwd("/Users/Rashid/Desktop/Rashid/Career/PhD/Research/projects/NCIPathways/bioModels/curated/BIOMD0000000427/finaltable/")
save(tfinal,file=myfile)
}
}
}
##}
?listInstances
pw_list <- listInstances(biopax,class = "pathway",includeSubClasses = TRUE)
pw_list
pw_list <- listInstances(biopax,class = "control",includeSubClasses = TRUE)
pw_list
pw_list <- selectInstances(biopax,class = "pathway",includeSubClasses = TRUE)
pw_list
lid <- length(pw_list[,1])
for (ii in 1:lid){
print(ii)
#ii<-1
pwid1 = pw_list[ii,1]
pw_component_list = listPathwayComponents(biopax,pwid1, returnIDonly=T)
if(length(pw_component_list)==0) {warning("Pathway seems to have no pathway components"); return(NULL)}
pw_component_list = selectInstances(biopax,id=pw_component_list, includeReferencedInstances=TRUE, returnCopy=TRUE)
print(pw_component_list)
pw_component_list$property = tolower(pw_component_list$property)
setkeyv(pw_component_list, cols=c("id","class","property"))
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("control","catalysis","modulation","templatereactionregulation"),]
pw_controls = pw_component_list[tolower(pw_component_list$class) %chin% c("physical-entity","cellular-location","xref","stoichiometric-coefficient","db","right","left","term","id"),]
#print(pw_controls)
idx <- NULL
idx1 <- NULL
## if (length(pw_controls$id)!=0){
readMatrix <- function(biopax,pwid1,ii) {
out <- tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
message("This is the 'try' part")
##readLines(con=url, warn=FALSE)
pathway2AdjacancyMatrix(biopax, pwid1, expandSubpathways=TRUE,splitComplexMolecules=TRUE, verbose=TRUE,useIDasNodenames=TRUE)
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("URL does not seem to exist:", pwid1,ii))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", pwid1,ii))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("Processed URL:", pwid1,ii))
message("Some other message at the end")
}
)
return(out)
}
pw_1_adj <- readMatrix(biopax,pwid1,ii)
print(pw_1_adj)
# print(pw_1_adj)
if( !is.null(pw_1_adj)){
ndim <- nrow(pw_1_adj)
if((ndim != 0)&(ndim != 1)){
idx <- which(pw_1_adj !=0,arr.ind = T)
if(!(length(idx) == 0)){
tname <- matrix(0,nrow(idx),ncol(idx))
for(i1 in 1:nrow(idx)){
for(j1 in 1:ncol(idx)){
tname[i1,j1] <- rownames(pw_1_adj)[idx[i1,j1]]
}
}
}
colnames(tname) <- c("source","destination")
rownames(tname) <- rownames(idx)
## set all non zero elements in matrix is 1
tvalue <- matrix(0,nrow(idx),1)
for(i2 in 1:nrow(idx)){
for(j2 in 1:ncol(idx)){
tvalue[i2,1] <- 1
}
}
colnames(tvalue) <- "Interaction"
rownames(tvalue) <- rownames(idx)
tfinal <- cbind (tname,tvalue)
## adjust the inhibiton to -1 in matrix
idx1 <- which(pw_1_adj =="-1",arr.ind = T)
#idx2 <- which(apply(matrix(idx %in% idx1, dim(idx)), 1, all))
nidx <- length(idx1)
if (!(nidx == 0)){
ts <- matrix(0,nrow(idx1),1)
for(i in 1:nrow(idx1)){
tmp <- idx1[i,]
j <- 1
for (j in 1:nrow(idx)){
if ((tmp[1]== idx[j,1]) & (tmp[2]==idx[j,2])){
ts[i] <- j
}
j <- j+1
}
}
tfinal[ts,3] <- -1
}
View(tfinal)
myfile <- paste(pw_list[ii,1],".rda")
print(myfile)
if(grepl("/",myfile)){
myfile<-gsub("/", "\\", myfile, fixed=TRUE)
}
setwd("/Users/Rashid/Desktop/Rashid/Career/PhD/Research/projects/NCIPathways/bioModels/curated/BIOMD0000000427/finaltable/")
save(tfinal,file=myfile)
}
}
}
##}
data("biopaxexample)
data("biopaxexample")
View(biopax$dt)
listInstances(biopax, class="pathway")
load("/Users/Rashid/Desktop/Rashid/Career/PhD/Research/projects/NCIPathways/bioModels/curated/BIOMD0000000427/BIOMD0000000427-biopax2")
biopax$dt
View(biopax$dt)
setwd("~/Desktop/Rpackages/SigNetA")
shiny::runApp('inst/examples/SigNetA-app')
shiny::runApp('inst/examples/SigNetA-app')
shiny::runApp('inst/examples/SigNetA-app')
shiny::runApp('inst/examples/SigNetA-app')
getwd()
document()
shiny::runApp('inst/examples/SigNetA-app')
shiny::runApp('inst/examples/SigNetA-app')
document()
shiny::runApp('inst/examples/SigNetA-app')
shiny::runApp('inst/examples/SigNetA-app')
shiny::runApp('inst/examples/SigNetA-app')
document()
shiny::runApp('inst/examples/SigNetA-app')
document()
document()
shiny::runApp('inst/examples/SigNetA-app')
?dms
document()
shiny::runApp('inst/examples/SigNetA-app')
